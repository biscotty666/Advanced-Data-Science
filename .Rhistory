deck <- expand.grid(number = numbers, suit=suits)
deck <- paste(deck$number, deck$suit)
deck
kings <- paste("King", suits)
kings
mean(deck %in% kings)
library(gtools)
permutations(10,7) |> head(10)
permutations(10,7, v = 10:19) |> head(10)
all_phone_numbers <- permutations(10, 7, v = 0:9)
n <- nrow(all_phone_numbers)
index <- sample(n, 5)
all_phone_numbers[index,]
hands <- permutations(52, 2, v = deck)
head(hands, 6)
mean(first_card %in% kings & second_card %in% kings) /
mean(first_card %in% kings)
B <- 10000
monty_hall <- function(strategy){
doors <- as.character(1:3)
prizes <- c("car", "goat", "goat")
# called w/o second argument, sample returns all values
# in random order
prize <- sample(prizes)
prize_door <- doors[prize == "car"]
my_pick <- sample(doors, 1)
show <- sample(doors[!doors %in% c(my_pick, prize_door)],1)
stick <- my_pick
stick == prize_door
switch <- doors[!doors %in% c(my_pick, show)]
choice <- ifelse(strategy == "stick", stick, switch)
choice == prize_door
}
n <- 50
bdays <- sample(1:365, n, replace = TRUE)
B <- 10^seq(1, 5, len = 100)
compute_prob <- function(B, n = 25){
same_day <- replicate(B, same_birthday(n))
mean(same_day)
}
prob <- sapply(B, compute_prob)
plot(log10(B), prob)
set.seed(1986)
letters[1:5]
suits <- c("of Diamonds", "of Clubs", "of Hearts", "of Spades")
numbers <- c("Ace", "Deuce", "Three", "Four", "Five", "Six",
"Seven", "Eight", "Nine", "Ten", "Jack", "Queen",
"King")
deck <- expand.grid(number = numbers, suit=suits)
deck <- paste(deck$number, deck$suit)
deck
suits <- c("of Diamonds", "of Clubs", "of Hearts", "of Spades")
numbers <- c("Ace", "Deuce", "Three", "Four", "Five", "Six",
"Seven", "Eight", "Nine", "Ten", "Jack", "Queen",
"King")
deck <- expand.grid(number = numbers, suit=suits)
deck <- paste(deck$number, deck$suit)
deck
kings <- paste("King", suits)
kings
mean(deck %in% kings)
library(gtools)
permutations(10,7) |> head(10)
permutations(10,7, v = 10:19) |> head(10)
all_phone_numbers <- permutations(10, 7, v = 0:9)
n <- nrow(all_phone_numbers)
index <- sample(n, 5)
all_phone_numbers[index,]
hands <- permutations(52, 2, v = deck)
head(hands, 6)
hands[2:4,2]
first_card <- hands[,1]
second_card <- hands[,2]
sum(first_card %in% kings)
mean(first_card %in% kings & second_card %in% kings) /
mean(first_card %in% kings)
combinations(3,2)
print(mean(first_card %in% kings & second_card %in% kings) /
mean(first_card %in% kings))
print(mean(first_card %in% kings & second_card %in% kings) /
mean(first_card %in% kings))
combinations(3,2)
aces <- paste("Ace", suits)
facecard <- c("King", "Queen", "Jack", "Ten")
facecard <- expand.grid(number = facecard, suit = suits)
facecard <- paste(facecard$number, facecard$suit)
hands <- combinations(52, 2, v = deck)
mean((hands[,1] %in% aces & hands[,2] %in% facecard) |
(hands[,2] %in% aces & hands[,1] %in% facecard))
hand <- sample(deck, 2)
hand
(hand[1] %in% aces & hand[2] %in% facecard) |
(hand[2] %in% aces & hand[1] %in% facecard)
blackjack <- function(){
hand <- sample(deck, 2)
(hand[1] %in% aces & hand[2] %in% facecard) |
(hand[2] %in% aces & hand[1] %in% facecard)
}
blackjack()
B <- 10000
results <- replicate(B, blackjack())
mean(results)
B <- 10000
monty_hall <- function(strategy){
doors <- as.character(1:3)
prizes <- c("car", "goat", "goat")
# called w/o second argument, sample returns all values
# in random order
prize <- sample(prizes)
prize_door <- doors[prize == "car"]
my_pick <- sample(doors, 1)
show <- sample(doors[!doors %in% c(my_pick, prize_door)],1)
stick <- my_pick
stick == prize_door
switch <- doors[!doors %in% c(my_pick, show)]
choice <- ifelse(strategy == "stick", stick, switch)
choice == prize_door
}
stick <- replicate(B, monty_hall("stick"))
mean(stick)
switch <- replicate(B, monty_hall("switch"))
mean(switch)
n <- 50
bdays <- sample(1:365, n, replace = TRUE)
duplicated(bdays)
any(duplicated(bdays))
B <- 10000
same_birthday <- function(n){
bdays <- sample(1:365, n, replace = TRUE)
any(duplicated(bdays))
}
results <- replicate(B, same_birthday(n))
mean(results)
compute_prob <- function(n, B = 10000){
results <- replicate(B, same_birthday(n))
mean(results)
}
library(tidyverse)
n <- seq(1,60)
prob <- sapply(n, compute_prob)
qplot(n, prob)
data.frame(n, prob) |>
ggplot(aes(n, prob)) +
geom_point()
exact_prob <- function(n){
prob_unique <- seq(365, 365 - n + 1) / 365
1 - prod(prob_unique)
}
eprob <- sapply(n, exact_prob)
ggplot() +
geom_point(aes(n, prob)) +
geom_line(aes(n, eprob), col="red")
B <- 10^seq(1, 5, len = 100)
compute_prob <- function(B, n = 25){
same_day <- replicate(B, same_birthday(n))
mean(same_day)
}
prob <- sapply(B, compute_prob)
plot(log10(B), prob)
library(tidyverse)
library(dslabs)
x <- heights %>% filter(sex == "Male") %>% pull(height)
library(tidyverse)
library(dslabs)
x <- heights %>% filter(sex == "Male") %>% pull(height)
F <- function(a) mean(x <= a)
1 - F(70)
cont <- data.frame(x = seq(0, 5, len = 300), y = dgamma(seq(0, 5, len = 300), 2, 2))
disc <- data.frame(x = seq(0, 5, 0.075), y = dgamma(seq(0, 5, 0.075), 2, 2))
ggplot(mapping = aes(x, y)) +
geom_col(data =  disc) +
geom_line(data = cont) +
ylab("f(x)")
F(a) = pnorm(a, m, s)
m <- mean(x)
s <- sd(x)
1 - pnorm(70.5, m, s)
mean(x <= 68.5) - mean(x <= 67.5)
mean(x <= 69.5) - mean(x <= 68.5)
mean(x <= 70.5) - mean(x <= 69.5)
pnorm(68.5, m, s) - pnorm(67.5, m, s)
pnorm(69.5, m, s) - pnorm(68.5, m, s)
pnorm(70.5, m, s) - pnorm(69.5, m, s)
mean(x <= 70.9) - mean(x <= 70.1)
pnorm(70.9, m, s) - pnorm(70.1, m, s)
1 - pnorm(76, m, s)
dat <- tibble(x = seq(-4, 4, length = 100)*s + m,
y = dnorm(x, m, s))
dat_ribbon <- filter(dat, x >= 2*s + m)
ggplot(dat, aes(x, y)) +
geom_line() +
geom_ribbon(aes(ymin = 0, ymax = y), data = dat_ribbon)
n <- length(x)
m <- mean(x)
s <- sd(x)
simulated_heights <- rnorm(n, m, s)
data.frame(simulated_heights = simulated_heights) |>
ggplot(aes(simulated_heights)) +
geom_histogram(color = "black", binwidth = 1)
B <- 10000
tallest <- replicate(B, {
simulated_data <- rnorm(800, m, s)
max(simulated_data)
})
mean(tallest >= 7*12)
data.frame(tallest = tallest) |> ggplot(aes(tallest)) +
geom_histogram(color = "black", binwidth = 1)
x <- seq(-4, 4, length.out = 100)
qplot(x, f, geom = "line", data = data.frame(x, f = dnorm(x)))
x <- seq(-4, 4, length.out = 100)
qplot(x, f, geom = "line", data = data.frame(x, f = qnorm(x)))
x <- seq(-4, 4, length.out = 100)
qplot(x, f, geom = "line", data = data.frame(x, f = dnorm(x)))
library(tidyverse)
library(dslabs)
x <- heights %>% filter(sex == "Male") %>%
pull(height)
x
x <- heights %>% filter(sex == "Male") %>%
pull(height)
F <- function(a) mean(x <= a)
1 - F(70)
1 - F(70)
cont <- data.frame(x = seq(0, 5, len = 300), y = dgamma(seq(0, 5, len = 300), 2, 2))
disc <- data.frame(x = seq(0, 5, 0.075), y = dgamma(seq(0, 5, 0.075), 2, 2))
ggplot(mapping = aes(x, y)) +
geom_col(data =  disc) +
geom_line(data = cont) +
ylab("f(x)")
m <- mean(x)
s <- sd(x)
1 - pnorm(70.5, m, s)
m <- mean(x)
s <- sd(x)
1 - pnorm(70.5, m, s)
mean(x <= 68.5) - mean(x <= 67.5)
mean(x <= 69.5) - mean(x <= 68.5)
mean(x <= 70.5) - mean(x <= 69.5)
mean(x <= 68.5) - mean(x <= 67.5)
mean(x <= 69.5) - mean(x <= 68.5)
mean(x <= 70.5) - mean(x <= 69.5)
mean(x <= 68.5) - mean(x <= 67.5)
pnorm(68.5, m, s) - pnorm(67.5, m, s)
mean(x <= 69.5) - mean(x <= 68.5)
pnorm(69.5, m, s) - pnorm(68.5, m, s)
mean(x <= 70.5) - mean(x <= 69.5)
pnorm(70.5, m, s) - pnorm(69.5, m, s)
mean(x <= 70.9) - mean(x <= 70.1)
pnorm(70.9, m, s) - pnorm(70.1, m, s)
mean(x <= 70.9) - mean(x <= 70.1)
pnorm(70.9, m, s) - pnorm(70.1, m, s)
mean(x <= 68.9) - mean(x <= 68.1)
pnorm(68.9, m, s) - pnorm(68.1, m, s)
mean(x <= 69.9) - mean(x <= 67.1)
pnorm(69.9, m, s) - pnorm(67.1, m, s)
mean(x <= 69.9) - mean(x <= 66.1)
pnorm(69.9, m, s) - pnorm(66.1, m, s)
1 - pnorm(76, m, s)
dat <- tibble(x = seq(-4, 4, length = 100)*s + m,
y = dnorm(x, m, s))
dat_ribbon <- filter(dat, x >= 2*s + m)
ggplot(dat, aes(x, y)) +
geom_line() +
geom_ribbon(aes(ymin = 0, ymax = y), data = dat_ribbon)
n <- length(x)
m <- mean(x)
s <- sd(x)
simulated_heights <- rnorm(n, m, s)
n <- length(x)
m <- mean(x)
s <- sd(x)
simulated_heights <- rnorm(n, m, s)
simulated_heights |>
autoplot()
n <- length(x)
m <- mean(x)
s <- sd(x)
simulated_heights <- rnorm(n, m, s)
autoplot(simulated_heights)
library(tidyverse)
library(dslabs)
n <- length(x)
m <- mean(x)
s <- sd(x)
simulated_heights <- rnorm(n, m, s)
plot(simulated_heights)
n <- length(x)
m <- mean(x)
s <- sd(x)
simulated_heights <- rnorm(n, m, s)
data.frame(simulated_heights = simulated_heights) |>
ggplot(aes(simulated_heights)) +
geom_histogram(color = "black", binwidth = 1)
B <- 10000
tallest <- replicate(B, {
simulated_data <- rnorm(800, m, s)
max(simulated_data)
})
mean(tallest >= 7*12)
mean(tallest >= 7*12)
B <- 10000
tallest <- replicate(B, {
simulated_data <- rnorm(800, m, s)
max(simulated_data)
})
mean(tallest >= 7*12)
data.frame(tallest = tallest) %>%
ggplot(aes(tallest)) +
geom_histogram(color='blue', bins = 1)
data.frame(tallest = tallest) %>%
ggplot(aes(tallest)) +
geom_histogram(color='blue', binwidth = 1)
data.frame(tallest = tallest) %>%
ggplot(aes(tallest)) +
geom_histogram(color='black', binwidth = 1)
x <- seq(-4, 4, length.out = 100)
qplot(x, f, geom = "line", data = data.frame(x, f = dnorm(x)))
getwd()
setwd("../RShiny")
getwd()
setwd("FCCTut")
getwd()
install.packages("plotly")
data.frame(tallest = tallest) %>%
ggplot(aes(tallest)) +
geom_histogram(color='black', binwidth = 1)
library(tidyverse)
library(dslabs)
x <- heights %>% filter(sex == "Male") %>%
pull(height)
F <- function(a) mean(x <= a)
1 - F(70)
cont <- data.frame(x = seq(0, 5, len = 300), y = dgamma(seq(0, 5, len = 300), 2, 2))
disc <- data.frame(x = seq(0, 5, 0.075), y = dgamma(seq(0, 5, 0.075), 2, 2))
ggplot(mapping = aes(x, y)) +
geom_col(data =  disc) +
geom_line(data = cont) +
ylab("f(x)")
library(plotly)
cont <- data.frame(x = seq(0, 5, len = 300), y = dgamma(seq(0, 5, len = 300), 2, 2))
disc <- data.frame(x = seq(0, 5, 0.075), y = dgamma(seq(0, 5, 0.075), 2, 2))
ggplot(mapping = aes(x, y)) +
geom_col(data =  disc) +
geom_line(data = cont) +
ylab("f(x)") -> p
plotly(p)
cont <- data.frame(x = seq(0, 5, len = 300), y = dgamma(seq(0, 5, len = 300), 2, 2))
disc <- data.frame(x = seq(0, 5, 0.075), y = dgamma(seq(0, 5, 0.075), 2, 2))
ggplot(mapping = aes(x, y)) +
geom_col(data =  disc) +
geom_line(data = cont) +
ylab("f(x)") -> p
ggplotly(p)
library(tidyverse)
library(dslabs)
library(plotly)
x <- heights %>% filter(sex == "Male") %>%
pull(height)
F <- function(a) mean(x <= a)
1 - F(70)
cont <- data.frame(x = seq(0, 5, len = 300), y = dgamma(seq(0, 5, len = 300), 2, 2))
disc <- data.frame(x = seq(0, 5, 0.075), y = dgamma(seq(0, 5, 0.075), 2, 2))
ggplot(mapping = aes(x, y)) +
geom_col(data =  disc) +
geom_line(data = cont) +
ylab("f(x)") -> p
ggplotly(p)
m <- mean(x)
s <- sd(x)
1 - pnorm(70.5, m, s)
mean(x <= 68.5) - mean(x <= 67.5)
pnorm(68.5, m, s) - pnorm(67.5, m, s)
mean(x <= 69.5) - mean(x <= 68.5)
pnorm(69.5, m, s) - pnorm(68.5, m, s)
mean(x <= 70.5) - mean(x <= 69.5)
pnorm(70.5, m, s) - pnorm(69.5, m, s)
mean(x <= 70.9) - mean(x <= 70.1)
pnorm(70.9, m, s) - pnorm(70.1, m, s)
mean(x <= 68.9) - mean(x <= 68.1)
pnorm(68.9, m, s) - pnorm(68.1, m, s)
mean(x <= 69.9) - mean(x <= 66.1)
pnorm(69.9, m, s) - pnorm(66.1, m, s)
1 - pnorm(76, m, s)
dat <- tibble(x = seq(-4, 4, length = 100)*s + m,
y = dnorm(x, m, s))
dat_ribbon <- filter(dat, x >= 2*s + m)
ggplot(dat, aes(x, y)) +
geom_line() +
geom_ribbon(aes(ymin = 0, ymax = y), data = dat_ribbon) -> p
ggplotly(p)
n <- length(x)
m <- mean(x)
s <- sd(x)
simulated_heights <- rnorm(n, m, s)
data.frame(simulated_heights = simulated_heights) |>
ggplot(aes(simulated_heights)) +
geom_histogram(color = "black", binwidth = 1)
B <- 10000
tallest <- replicate(B, {
simulated_data <- rnorm(800, m, s)
max(simulated_data)
})
mean(tallest >= 7*12)
data.frame(tallest = tallest) %>%
ggplot(aes(tallest)) +
geom_histogram(color='black', binwidth = 1)
x <- seq(-4, 4, length.out = 100)
qplot(x, f, geom = "line", data = data.frame(x, f = dnorm(x)))
data.frame(x, f = dnorm(x)) %>%
ggplot(aes(x, f)) +
geom_line()
x <- seq(-4, 4, length.out = 100)
qplot(x, f, geom = "line", data = data.frame(x, f = dnorm(x)))
test
getwd()
setwd("docs")
getwd()
tempdir()
library(tidyverse)
library(dslabs)
library(plotly)
take_poll(25)
library(tidyverse)
library(dslabs)
mnist <- read_mnist()
class(mnist$train$images)
table(mnist$train$labels)
x <- mnist$train$images
y <- mnist$train$labels
nrow(x)
ncol(x)
dim(x)
?matrix
z <- matrix(rnorm(100*2), 100, 2)
matrix(1:15, 3, 5)
matrix(1:15, 3, 5, byrow = TRUE)
as.vector(matrix(1:15, 3, 5))
mnist$train$label[3]
grid <- matrix(x[3,], 28, 28)
image(1:28, 1:28, grid)
rafalib::mypar(1,1)
image(1:28, 1:28, grid)
rafalib::mypar(1,1)
image(1:28, 1:28, grid[, 28:1])
dim(x)
dim(t(x))
avg <- rowMeans(x)
library(matrixStats)
sds <- rowSds(x)
boxplot(avg ~ y)
matrix(1:15, 3, 5)[,c(FALSE, TRUE, TRUE, FALSE, TRUE)]
sds <- colSds(x)
hist(sds, breaks = 30, main = "SDs")
image(1:28, 1:28, matrix(sds, 28, 28)[, 28:1])
new_x <- x[, colSds(x) > 60]
dim(new_x)
mat <- matrix(1:15, 3, 5)
mat[mat > 6 & mat < 12] <- 0
mat
hist(as.vector(x), breaks = 30, main = "Pixel intensities")
new_x[new_x < 50] <- 0
bin_x <- x
bin_x[bin_x < 255/2] <- 0
bin_x[bin_x > 255/2] <- 1
bin_X <- (x > 255/2)*1
?sweep
x_mean_0 <- sweep(x, 2, colMeans(x))
x_standardized <- sweep(x_mean_0, 2, colSds(x), FUN = "/")
library(tidyverse)
library(dslabs)
mnist <- read_mnist()
class(mnist$train$images)
table(mnist$train$labels)
x <- mnist$train$images
y <- mnist$train$labels
nrow(x)
ncol(x)
dim(x)
z <- matrix(rnorm(100*2), 100, 2)
matrix(1:15, 3, 5)
matrix(1:15, 3, 5, byrow = TRUE)
as.vector(matrix(1:15, 3, 5))
mnist$train$label[3]
grid <- matrix(x[3,], 28, 28)
rafalib::mypar(1,1)
image(1:28, 1:28, grid)
rafalib::mypar(1,1)
image(1:28, 1:28, grid[, 28:1])
dim(x)
dim(t(x))
avg <- rowMeans(x)
library(matrixStats)
sds <- rowSds(x)
boxplot(avg ~ y)
matrix(1:15, 3, 5)[,c(FALSE, TRUE, TRUE, FALSE, TRUE)]
sds <- colSds(x)
hist(sds, breaks = 30, main = "SDs")
image(1:28, 1:28, matrix(sds, 28, 28)[, 28:1])
new_x <- x[, colSds(x) > 60]
dim(new_x)
mat <- matrix(1:15, 3, 5)
mat[mat > 6 & mat < 12] <- 0
mat
hist(as.vector(x), breaks = 30, main = "Pixel intensities")
new_x <- x
new_x[new_x < 50] <- 0
bin_x <- x
bin_x[bin_x < 255/2] <- 0
bin_x[bin_x > 255/2] <- 1
bin_X <- (x > 255/2)*1
x_mean_0 <- sweep(x, 2, colMeans(x))
x_standardized <- sweep(x_mean_0, 2, colSds(x), FUN = "/")
